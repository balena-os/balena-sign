openapi: 3.0.0

info:
  title: balenaSign API
  version: 0.9.1

paths:
  /gpg/keys:
    get:
      operationId: gpg.keys
      responses:
        200:
          description: Fingerprints of GPG keys available on the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gpgKeysResponse"

  /gpg/key/{key_id}:
    get:
      operationId: gpg.key
      parameters:
        - $ref: "#/components/parameters/gpgKey"
      responses:
        200:
          description: Armored GPG public key for the given fingerprint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gpgKeyResponse"

  /gpg/key:
    post:
      operationId: gpg.new
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gpgNewRequest"
      responses:
        200:
          description: Fingerprint of the newly created GPG key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gpgNewResponse"

  /gpg/sign:
    post:
      operationId: gpg.sign
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/gpgSignRequest"
      responses:
        200:
          description: base64-encoded GPG signature of the given payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/gpgSignResponse"

  /cert:
    post:
      operationId: cert.new
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/certNewRequest"
      responses:
        200:
          description: Newly created certificate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/certNewResponse"

  /cert/{cert_id}:
    get:
      operationId: cert.get
      parameters:
        - $ref: "#/components/parameters/certId"
      responses:
        200:
          description: The requested certificate in PEM format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/certNewResponse"

  /secureboot/pk/{cert_id}:
    get:
      operationId: secureboot.get_pk
      parameters:
        - $ref: "#/components/parameters/certId"
      responses:
        200:
          description: base64-encoded platform key for UEFI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootPKResponse"

  /secureboot/pk:
    post:
      operationId: secureboot.sign_pk
      security:
      - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/securebootESLSignRequest"
      responses:
        200:
          description: empty
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootESLSignResponse"

  /secureboot/kek/{cert_id}:
    get:
      operationId: secureboot.get_kek
      parameters:
        - $ref: "#/components/parameters/certId"
      responses:
        200:
          description: base64-encoded key exchange key for UEFI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootKEKResponse"

  /secureboot/kek:
    post:
      operationId: secureboot.sign_kek
      security:
      - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/securebootESLSignRequest"
      responses:
        200:
          description: empty
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootESLSignResponse"

  /secureboot/db/{cert_id}:
    get:
      operationId: secureboot.get_db
      parameters:
        - $ref: "#/components/parameters/certId"
      responses:
        200:
          description: base64-encoded db for UEFI
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootDbResponse"

  /secureboot/db:
    post:
      operationId: secureboot.sign_db
      security:
      - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/securebootESLSignRequest"
      responses:
        200:
          description: empty
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootESLSignResponse"

  /secureboot/efi:
    post:
      operationId: secureboot.sign_efi
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/securebootSignRequest"
      responses:
        200:
          description: base64-encoded signed EFI binary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/securebootSignResponse"

  /kmod/cert/{cert_id}:
    get:
      operationId: kmod.cert
      parameters:
        - $ref: "#/components/parameters/certId"
      responses:
        200:
          description: Certificate to verify kernel modules signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kmodCertResponse"

  /kmod/sign:
    post:
      operationId: kmod.sign
      security:
        - apiKey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/kmodSignRequest"
      responses:
        200:
          description: base64-encoded signed kernel module
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kmodSignResponse"

components:
  securitySchemes:
    apiKey:
      x-apikeyInfoFunc: auth.validate
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    gpgKey:
      name: key_id
      description: Fingeprint of the GPG key to fetch
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/gpgKeyFingerprint"

    certId:
      name: cert_id
      description: ID of the certificate to fetch
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/certId"

  schemas:
    base64:
      type: string
      pattern: "^[a-zA-Z0-9/\\+]+=?=?$"

    certId:
      type: string

    certSubject:
      type: string

    certData:
      type: string

    keyLength:
      type: integer
      default: 2048
      enum:
        - 2048
        - 4096

    gpgKey:
      type: string

    gpgKeyFingerprint:
      type: string
      pattern: "^[a-fA-F0-9]+$"

    gpgKeyFingerprintList:
      type: array
      items:
        $ref: "#/components/schemas/gpgKeyFingerprint"

    gpgKeyNameReal:
      type: string

    gpgKeyNameEmail:
      type: string

    gpgKeyNameComment:
      type: string

    gpgKeysResponse:
      type: object
      required:
        - keys
      properties:
        keys:
          $ref: "#/components/schemas/gpgKeyFingerprintList"

    gpgNewRequest:
      type: object
      required:
        - name_real
        - name_email
      properties:
        name_real:
          $ref: "#/components/schemas/gpgKeyNameReal"
        name_email:
          $ref: "#/components/schemas/gpgKeyNameEmail"
        name_comment:
          $ref: "#/components/schemas/gpgKeyNameComment"
        key_length:
          $ref: "#/components/schemas/keyLength"

    gpgNewResponse:
      type: object
      required:
        - fingerprint
      properties:
        fingerprint:
          $ref: "#/components/schemas/gpgKeyFingerprint"

    gpgKeyResponse:
      type: object
      required:
        - key
      properties:
        key:
          $ref: "#/components/schemas/gpgKey"

    gpgSignRequest:
      type: object
      required:
        - key_id
        - payload
      properties:
        key_id:
          $ref: "#/components/schemas/gpgKeyFingerprint"
        payload:
          $ref: "#/components/schemas/base64"

    gpgSignResponse:
      type: object
      required:
        - signature
      properties:
        signature:
          $ref: "#/components/schemas/base64"

    certNewRequest:
      type: object
      required:
        - subject
        - cert_id
      properties:
        cert_id:
          $ref: "#/components/schemas/certId"
        subject:
          $ref: "#/components/schemas/certSubject"
        key_length:
          $ref: "#/components/schemas/keyLength"

    certNewResponse:
      type: object
      required:
        - cert
      properties:
        cert:
          $ref: "#/components/schemas/certData"

    securebootPKResponse:
      type: object
      required:
        - pk
      properties:
        pk:
          $ref: "#/components/schemas/base64"

    securebootKEKResponse:
      type: object
      required:
        - kek
      properties:
        kek:
          $ref: "#/components/schemas/base64"

    securebootDbResponse:
      type: object
      required:
        - db
      properties:
        db:
          $ref: "#/components/schemas/base64"

    securebootESLSignRequest:
      type: object
      required:
      - key_id
      properties:
        key_id:
          $ref: "#/components/schemas/certId"
        signing_key_id:
          $ref: "#/components/schemas/certId"

    securebootESLSignResponse:
      type: object

    securebootSignRequest:
      type: object
      required:
        - key_id
        - payload
      properties:
        key_id:
          $ref: "#/components/schemas/certId"
        payload:
          $ref: "#/components/schemas/base64"

    securebootSignResponse:
      type: object
      required:
        - signed
      properties:
        signed:
          $ref: "#/components/schemas/base64"

    kmodCertResponse:
      type: object
      required:
        - cert
      properties:
        cert:
          type: string

    kmodSignRequest:
      type: object
      required:
        - key_id
        - payload
      properties:
        key_id:
          $ref: "#/components/schemas/certId"
        payload:
          $ref: "#/components/schemas/base64"

    kmodSignResponse:
      type: object
      required:
        - signed
      properties:
        signed:
          $ref: "#/components/schemas/base64"
